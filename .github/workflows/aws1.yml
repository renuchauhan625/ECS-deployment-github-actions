name: Deploy to ECR

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ecs-windows           # set this to your Amazon ECR repository name
  # ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: workshop-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: web-app1           # set this to the name of the container in the
                                               # containerDefinitions section of your task definitio
  ECS_TASK: run-task.json


jobs:
  build:
    name: Build and Push Image
    runs-on: task-hosted

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecs-windows
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          docker build -t win-app-container .
          docker tag win-app-container:latest 481331750683.dkr.ecr.us-east-1.amazonaws.com/ecs-windows:latest
          docker push 481331750683.dkr.ecr.us-east-1.amazonaws.com/ecs-windows:latest
          echo "::set-output name=image::481331750683.dkr.ecr.us-east-1.amazonaws.com/ecs-windows:latest"
      - name: Print
        run: 
          echo "::set-output name=image::481331750683.dkr.ecr.us-east-1.amazonaws.com/ecs-windows:latest"
          echo "%image%"
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: 481331750683.dkr.ecr.us-east-1.amazonaws.com/ecs-windows:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deploy Amazon ECS task 
        id: deploy-task
        run: |
          $taskArn = aws ecs run-task `
              --cli-input-json file://run-task.json --query "tasks[*].containers[*].taskArn" --output text
          # Wait for the EC2 instance to be in the "running" state
          while [[ "$(aws ecs describe-tasks --cluster workshop-cluster --tasks $taskArn --query "tasks[*].lastStatus" --output text) != "RUNNING"]]; do
              echo "Waiting for EC2 instance to be in a running state..."
              sleep 150
          done

          echo "EC2 instance is now in a running state."
      - name: Task Ip Addres
        run: |
          aws ecs describe-tasks --cluster workshop-cluster --tasks $taskArn --query "tasks[*].attachments[*].details[?name=='privateIPv4Address'].value"


      - name: Tag the Docker Image Locally
        run: docker tag 481331750683.dkr.ecr.us-east-1.amazonaws.com/ecs-windows:latest sdk2:bmo2

      - name: Create Local Docker Image
        run: docker build -t sdk2:bmo2 .

      - name: Run Docker Container
        run: docker run -d -p 8080:80 sdk2:bmo2

      - name: List Local Docker Images
        run: docker images

      - name: List Local RUNNING Docker Images
        run: docker ps
   
   
